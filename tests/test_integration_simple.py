#!/usr/bin/env python3
"""
Script de prueba simplificado para la integraci√≥n
================================================

Este script prueba la integraci√≥n sin prompts interactivos.

Uso:
    python test_integration_simple.py
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path

# A√±adir src al path
sys.path.insert(0, 'src')

def test_supervisor_only():
    """Probar solo el supervisor"""
    print("üîç Probando supervisor independiente...")
    
    # Crear directorio temporal
    test_dir = tempfile.mkdtemp(prefix='supervisor_test_')
    project_path = Path(test_dir) / 'supervisor_test_project'
    project_path.mkdir()
    
    try:
        # Crear estructura b√°sica
        (project_path / 'src').mkdir()
        (project_path / 'tests').mkdir()
        (project_path / 'docs').mkdir()
        (project_path / 'logs').mkdir()
        
        # Crear archivo de test en ra√≠z (problema)
        with open(project_path / 'test_main.py', 'w') as f:
            f.write("def test_main(): pass")
        
        # Crear bit√°cora
        with open(project_path / 'BITACORA.md', 'w') as f:
            f.write("# Bit√°cora del Proyecto\n\n")
        
        # Importar y probar supervisor
        from pre_cursor.cursor_supervisor import CursorSupervisor
        
        supervisor = CursorSupervisor(str(project_path), check_interval=1)
        report = supervisor.check_project_health()
        
        print(f"   Problemas encontrados: {len(report.issues_found)}")
        for issue in report.issues_found:
            print(f"   - {issue.severity.upper()}: {issue.description}")
        
        # Actualizar bit√°cora manualmente
        supervisor.update_bitacora(report)
        
        # Verificar que se actualiz√≥ la bit√°cora
        with open(project_path / 'BITACORA.md', 'r') as f:
            content = f.read()
            if "Supervisi√≥n Autom√°tica" in content:
                print("   ‚úÖ Bit√°cora actualizada correctamente")
                return True
            else:
                print("   ‚ùå Bit√°cora no actualizada")
                print(f"   Contenido actual: {content[:200]}...")
                return False
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        shutil.rmtree(test_dir)

def test_integration_module():
    """Probar m√≥dulo de integraci√≥n"""
    print("\nüîó Probando m√≥dulo de integraci√≥n...")
    
    # Crear directorio temporal
    test_dir = tempfile.mkdtemp(prefix='integration_test_')
    project_path = Path(test_dir) / 'test_project'
    project_path.mkdir()
    
    try:
        # Crear estructura b√°sica
        (project_path / 'src').mkdir()
        (project_path / 'tests').mkdir()
        (project_path / 'docs').mkdir()
        (project_path / 'logs').mkdir()
        
        # Crear bit√°cora
        with open(project_path / 'BITACORA.md', 'w') as f:
            f.write("# Bit√°cora del Proyecto\n\n")
        
        # Importar m√≥dulo de integraci√≥n
        from pre_cursor.cursor_integration import CursorIntegrationManager
        
        # Crear configuraci√≥n del proyecto
        project_config = {
            'tipo_proyecto': 'Python Library',
            'descripcion_proyecto': 'Proyecto de prueba',
            'nombre_proyecto': 'test_project',
            'version': '1.0.0',
            'autor': 'Test User',
            'email': 'test@example.com'
        }
        
        # Crear gestor de integraci√≥n
        integration_manager = CursorIntegrationManager(str(project_path), enable_supervision=True)
        
        # Generar instrucciones
        instructions = integration_manager.generate_cursor_instructions(
            project_config['tipo_proyecto'],
            project_config['descripcion_proyecto']
        )
        
        print(f"   Instrucciones generadas: {len(instructions)} caracteres")
        
        # Verificar que las instrucciones contienen contenido relevante
        if "Instrucciones para Cursor AI" in instructions:
            print("   ‚úÖ Instrucciones generadas correctamente")
            return True
        else:
            print("   ‚ùå Instrucciones no generadas correctamente")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        shutil.rmtree(test_dir)

def test_cursor_generator():
    """Probar generador de Cursor"""
    print("\nü§ñ Probando generador de Cursor...")
    
    # Crear directorio temporal
    test_dir = tempfile.mkdtemp(prefix='generator_test_')
    project_path = Path(test_dir) / 'test_project'
    project_path.mkdir()
    
    try:
        # Crear estructura b√°sica
        (project_path / 'src').mkdir()
        (project_path / 'tests').mkdir()
        (project_path / 'docs').mkdir()
        (project_path / 'logs').mkdir()
        
        # Crear bit√°cora
        with open(project_path / 'BITACORA.md', 'w') as f:
            f.write("# Bit√°cora del Proyecto\n\n")
        
        # Importar generador
        from pre_cursor.cursor_integration import CursorProjectGenerator
        
        # Crear configuraci√≥n del proyecto
        project_config = {
            'tipo_proyecto': 'Python Library',
            'descripcion_proyecto': 'Proyecto de prueba',
            'nombre_proyecto': 'test_project',
            'version': '1.0.0',
            'autor': 'Test User',
            'email': 'test@example.com'
        }
        
        # Crear generador
        generator = CursorProjectGenerator(str(project_path), project_config)
        
        # Generar proyecto (sin abrir Cursor)
        generator.integration_manager.enable_supervision = False  # Deshabilitar supervisi√≥n para test
        
        # Verificar que se pueden generar instrucciones
        instructions = generator.integration_manager.generate_cursor_instructions(
            project_config['tipo_proyecto'],
            project_config['descripcion_proyecto']
        )
        
        if "Instrucciones para Cursor AI" in instructions:
            print("   ‚úÖ Generador funcionando correctamente")
            return True
        else:
            print("   ‚ùå Generador no funcionando correctamente")
            return False
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        shutil.rmtree(test_dir)

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas de integraci√≥n simplificadas")
    
    # Probar componentes individuales
    supervisor_ok = test_supervisor_only()
    integration_ok = test_integration_module()
    generator_ok = test_cursor_generator()
    
    print(f"\nüìä Resultados finales:")
    print(f"   Supervisor independiente: {'‚úÖ' if supervisor_ok else '‚ùå'}")
    print(f"   M√≥dulo de integraci√≥n: {'‚úÖ' if integration_ok else '‚ùå'}")
    print(f"   Generador de Cursor: {'‚úÖ' if generator_ok else '‚ùå'}")
    
    if supervisor_ok and integration_ok and generator_ok:
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        return 0
    else:
        print("\n‚ùå Algunas pruebas fallaron")
        return 1

if __name__ == "__main__":
    sys.exit(main())
